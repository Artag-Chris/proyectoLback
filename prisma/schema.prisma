generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String   @unique
  email        String   @unique
  passwordHash String
  firstName    String?
  lastName     String?
  address      String?
  phoneNumber  String? @unique
  createdAt    DateTime @default(now())
  isAvailable  Boolean  @default(true)  // Campo para soft delete
  isAdmin      Boolean  @default(false) // Campo para definir si es administrador
  orders       Order[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isAvailable Boolean   @default(true)
  products    Product[] // Add this line to create the opposite relation field
}

model Product {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  price        Float
  stock        Int
  createdAt    DateTime  @default(now())
  isAvailable  Boolean   @default(true)  // Campo para soft delete
  categoryId   Int
  imageUrl     String?
  category     Category  @relation(fields: [categoryId], references: [id])
  orderItems   OrderItem[]
}

model OrderStatus {
  id          Int      @id @default(autoincrement())
  status      String   @unique
  isAvailable Boolean  @default(true)  // Campo para soft delete
  orders      Order[]
}

model Order {
  id            Int           @id @default(autoincrement())
  totalAmount   Float
  createdAt     DateTime      @default(now())
  userId        Int
  user          User          @relation(fields: [userId], references: [id])
  orderStatusId Int
  orderStatus   OrderStatus   @relation(fields: [orderStatusId], references: [id])
  isAvailable   Boolean       @default(true)  // Campo para soft delete
  orderItems    OrderItem[]
  transactions  Transaction[]
}

model OrderItem {
  id           Int     @id @default(autoincrement())
  quantity     Int
  price        Float
  orderId      Int
  order        Order   @relation(fields: [orderId], references: [id])
  productId    Int
  product      Product @relation(fields: [productId], references: [id])
  isAvailable  Boolean @default(true)  // Campo para soft delete
}

model Transaction {
  id              Int      @id @default(autoincrement())
  amount          Float
  transactionDate DateTime @default(now())
  paymentMethod   String
  orderId         Int
  order           Order    @relation(fields: [orderId], references: [id])
  isAvailable     Boolean  @default(true)  // Campo para soft delete
}
